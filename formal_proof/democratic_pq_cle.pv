set traceDisplay = long.
set attacker = active.
set ignoreTypes = false.
set preciseActions = true.

free broadcast_channel:channel.
free broadcast_channel_to_attacker:channel. (* This channel is not needed for the protocol, it is used to indicate that the attacker has an information *)
free node_2_1:channel.
free node_1_3:channel.
free node_2_3:channel.

free secret_to_transmit:bitstring [private].

type non_singular_matrix.

(* Just normal asymmetric cryptography *)
type skey.
type pkey.
fun pk(skey): pkey.
fun aenc(bitstring, pkey): bitstring.
reduc forall m: bitstring, k: skey; adec(aenc(m, pk(k)), k) = m.

type hsh.
fun hash(nat): hsh. (* Hi,1 is retrieved by making a circulant matrix from hash(node_id) *)

type key_init_vector. (* S_i *)
type witness_vector. (* R_i *)
fun witness_vector_to_bitstring(witness_vector): bitstring [data, typeConverter].
fun non_singular_matrices_to_witness(non_singular_matrix, non_singular_matrix): witness_vector. (* Ri = Hi,2^-1 * Hi,3 *)
fun get_witness_vector(skey): witness_vector. (* Retrieve Ri from sk *)
fun retrieve_pubkey_verif(key_init_vector, hsh, witness_vector): pkey. (* pk = (Id | (Si^-1 * Hi,1^-1 * Hi,2^-1 * Hi,3)^T) = (Id | (Si^-1 * Hi,1^-1 * Ri)^T) *)
fun generate_private_key(non_singular_matrix, non_singular_matrix, hsh, key_init_vector): skey. (* sk = (Hi,3 | Hi,2 * Hi,1 * Si ) *)
equation forall m1: non_singular_matrix, m2: non_singular_matrix, h: hsh, s: key_init_vector; pk(generate_private_key(m1, m2, h, s)) = retrieve_pubkey_verif(s, h, non_singular_matrices_to_witness(m1, m2)).
equation forall m1: non_singular_matrix, m2: non_singular_matrix, h: hsh, s: key_init_vector; get_witness_vector(generate_private_key(m1, m2, h, s)) = non_singular_matrices_to_witness(m1, m2).

(* When there is only one node signature, it can be directly converted to init vector *)
type new_node_acceptance_signature.
fun generate_new_node_sig(hsh, non_singular_matrix, non_singular_matrix): new_node_acceptance_signature.
reduc forall h:hsh, m1: non_singular_matrix, m2: non_singular_matrix; check_acceptance_sig(generate_new_node_sig(h, m1, m2), non_singular_matrices_to_witness(m1, m2)) = h.
fun sig_to_key_init_vector(new_node_acceptance_signature): key_init_vector [data, typeConverter].

(* Signature *)
type sskey.
type spkey.
fun spk(sskey): spkey.
fun sign(bitstring, sskey): bitstring.
reduc forall m: bitstring, k: sskey; getmess(sign(m, k)) = m.
reduc forall m: bitstring, k: sskey; checksign(sign(m, k), spk(k)) = m.
reduc forall m: bitstring, k: sskey; get_signing_key(sign(m, k)) = spk(k).

(* There are 2 nodes acceptance signature, the key init vector is retrieved by Lagrangian interpolation *)
type shares2_new_node_acceptance_signature.
type shares2_part_1_new_node_acceptance_signature.
type shares2_part_2_new_node_acceptance_signature.
fun generate_shares_2_new_node_sig(hsh, non_singular_matrix, non_singular_matrix): shares2_new_node_acceptance_signature.
fun extract_shares2_part_1_new_node_acceptance_signature(shares2_new_node_acceptance_signature): shares2_part_1_new_node_acceptance_signature.
fun extract_shares2_part_2_new_node_acceptance_signature(shares2_new_node_acceptance_signature): shares2_part_2_new_node_acceptance_signature.
reduc forall h:hsh, m1: non_singular_matrix, m2: non_singular_matrix; check_share2_acceptance_sig_part_1(extract_shares2_part_1_new_node_acceptance_signature(generate_shares_2_new_node_sig(h, m1, m2)), non_singular_matrices_to_witness(m1, m2)) = h.
reduc forall h:hsh, m1: non_singular_matrix, m2: non_singular_matrix; check_share2_acceptance_sig_part_2(extract_shares2_part_2_new_node_acceptance_signature(generate_shares_2_new_node_sig(h, m1, m2)), non_singular_matrices_to_witness(m1, m2)) = h.
fun shares2_sig_to_key_init_vector(shares2_part_1_new_node_acceptance_signature, shares2_part_2_new_node_acceptance_signature): key_init_vector [data].

type group_key.
fun kdf(group_key, bitstring): group_key. (* Group key derivation from seed *)
fun senc(group_key, bitstring): bitstring. (* Symmetric encryption *)
reduc forall m:bitstring, gk: group_key; sdec(gk, senc(gk, m)) = m.
fun group_key_to_bitstring(group_key): bitstring [data, typeConverter].

(* Store all signing public keys *)
table sig_public_keys(nat, spkey).

event node_signature_generated(nat, non_singular_matrix, non_singular_matrix).
event public_key_broadcast(nat, new_node_acceptance_signature).
event node_signature_generated_share2(nat, nat, non_singular_matrix, non_singular_matrix).
event public_key_broadcast_share2(nat, shares2_part_1_new_node_acceptance_signature, shares2_part_2_new_node_acceptance_signature).
event test_reachability(nat).

query attacker(secret_to_transmit).
query m1:non_singular_matrix, m2: non_singular_matrix, node_id: nat; inj-event(public_key_broadcast(node_id, generate_new_node_sig(hash(node_id), m1, m2))) ==> inj-event(node_signature_generated(node_id, m1, m2)).
query node1_hi2:non_singular_matrix, node1_hi3: non_singular_matrix, node2_hi2:non_singular_matrix, node2_hi3: non_singular_matrix, new_node_id: nat; inj-event(public_key_broadcast_share2(new_node_id, extract_shares2_part_1_new_node_acceptance_signature(generate_shares_2_new_node_sig(hash(new_node_id), node1_hi2, node1_hi3)), extract_shares2_part_2_new_node_acceptance_signature(generate_shares_2_new_node_sig(hash(new_node_id), node2_hi2, node2_hi3)))) ==> inj-event(node_signature_generated_share2(1, new_node_id, node1_hi2, node1_hi3)) && inj-event(node_signature_generated_share2(2, new_node_id, node2_hi2, node2_hi3)).
(*
The reachability fail if the code is reachable.
Uncomment to check reachability.
If the test fails, the code is reachable.
*)
(*
query event(test_reachability(0)).
query event(test_reachability(1)).
query event(test_reachability(2)).
query event(test_reachability(3)).
query event(test_reachability(1)) && event(test_reachability(2)) && event(test_reachability(3)).
*)

let node_1(node_id:nat, ssk:sskey, s_i_1:key_init_vector) =
    let hi_1 = hash(node_id) in
    new hi_2:non_singular_matrix; (* Generate secret matrices *)
    new hi_3:non_singular_matrix;
    let private_key = generate_private_key(hi_2, hi_3, hi_1, s_i_1) in
    let r_i = non_singular_matrices_to_witness(hi_2, hi_3) in (* Witness vector *)
    out(broadcast_channel, (r_i, sign(witness_vector_to_bitstring(r_i), ssk))); (* Witness vector is broadcast, but need to be signed as certificateless encryption assumes that there is no MitM attack *)
    new g_k:group_key; (* Node 1 generates a group key, even if it's alone for now *)
    sync 1 [node1];
    event node_signature_generated(2, hi_2, hi_3);
    out(node_2_1, generate_new_node_sig(hash(2), hi_2, hi_3)); (* Node 1 accepts node 2 to join the network *)
    in(broadcast_channel, (node_2_pk:pkey, node2_acceptance_sig:new_node_acceptance_signature, node_2_si:key_init_vector, node_2_ri:witness_vector, node_2_ri_sign:bitstring)); (* Retrieve broadcast node 2 public key, the acceptance signature node 1 just generated, the associated key init vector and the witness vector. The witness vector needs to be signed, in order to emulate the fact that MitM attack cannot occur. *)
    get sig_public_keys(=2, node_2_psk) in (* Retrieve all signin public keys *)
    get sig_public_keys(=3, node_3_psk) in
    let (=witness_vector_to_bitstring(node_2_ri)) = checksign(node_2_ri_sign, node_2_psk) in (* Check that witness vector has been correctly signed *)
    let (=hash(2)) = check_acceptance_sig(node2_acceptance_sig, r_i) in (* Check that the given acceptance signature is the one that node 1 just generated *)
    let (=node_2_si) = sig_to_key_init_vector(node2_acceptance_sig) in (* Check that the key init vector comes from node acceptance signature *)
    let (=node_2_pk) = retrieve_pubkey_verif(node_2_si, hash(2), node_2_ri) in (* Check that the node 2 public key has been generated from the key init vector, hash of node 2 id and the witness vector *)
    in(node_2_1, seed_enc:bitstring); (* Receive group key seed from node 2 *)
    let new_gk_seed = adec(seed_enc, private_key) in (* Retrieve new group key seed from node 2 *)
    let g_k = kdf(g_k, new_gk_seed) in (* Derivate new group key from old key and seed *)
    let new_g_k_enc = aenc(group_key_to_bitstring(g_k), node_2_pk) in (* Encrypt new group key using node 2 public key *)
    out(node_2_1, (new_g_k_enc, sign(new_g_k_enc, ssk))); (* Send new group key to node 2 *)
    in(node_2_1, secret_enc:bitstring); (* Receive secret encrypted using group key *)
    let (=secret_to_transmit) = sdec(g_k, secret_enc) in (* Decrypt secret *) (* <=== HERE !!! *)

    sync 2 [node1];

    event node_signature_generated_share2(1, 3, hi_2, hi_3);
    out(node_1_3, extract_shares2_part_1_new_node_acceptance_signature(generate_shares_2_new_node_sig(hash(3), hi_2, hi_3))); (* Accept node 3 to join, but now node 1 has only 50% of the voting threshold *)
    in(broadcast_channel, (node_3_pk:pkey, node3_acceptance_sig_node1:shares2_part_1_new_node_acceptance_signature, node3_acceptance_sig_node2:shares2_part_2_new_node_acceptance_signature, node_3_si:key_init_vector, node_3_ri:witness_vector, node_3_ri_sign:bitstring)); (* Retrieve broadcast node 3 public key, the acceptance signature node 1 and 2 generated, the associated key init vector and the witness vector. The witness vector needs to be signed, in order to emulate the fact that MitM attack cannot occur. *)
    let (=witness_vector_to_bitstring(node_3_ri)) = checksign(node_3_ri_sign, node_3_psk) in (* Check that witness vector has been correctly signed *)
    let (=hash(3)) = check_share2_acceptance_sig_part_1(node3_acceptance_sig_node1, r_i) in (* Check that the given acceptance signature is the one that node 1 just generated *)
    let (=hash(3)) = check_share2_acceptance_sig_part_2(node3_acceptance_sig_node2, node_2_ri) in (* Check that the given acceptance signature is the one that node 2 just generated *)
    let (=node_3_si) = shares2_sig_to_key_init_vector(node3_acceptance_sig_node1, node3_acceptance_sig_node2) in (* Check that the key init vector comes from the 2 node acceptance signatures *)
    let (=node_3_pk) = retrieve_pubkey_verif(node_3_si, hash(3), node_3_ri) in (* Check that the node 3 public key has been generated from the key init vector, hash of node 3 id and the witness vector *)

    in(node_1_3, seed_enc:bitstring); (* Receive group key seed from node 3 *)
    let new_gk_seed = adec(seed_enc, private_key) in (* Retrieve new group key seed from node 3 *)
    let g_k = kdf(g_k, new_gk_seed) in (* Derivate new group key from old key and seed *)
    let new_g_k_enc = aenc(group_key_to_bitstring(g_k), node_3_pk) in (* Encrypt new group key using node 3 public key *)
    out(node_1_3, (new_g_k_enc, sign(new_g_k_enc, ssk))); (* Send new group key to node 3 *)
    event test_reachability(1);
    0.

let node_2(node_id:nat, ssk:sskey, s_i_1:key_init_vector) =
    in(broadcast_channel, (witness_node_1:witness_vector, witness_node_1_sign:bitstring)); (* Retrieve node 1 witness vector, which is signed in order to emulate the fact that MitM isn't possible *)
    sync 1 [node2];
    get sig_public_keys(=1, node_1_psk) in (* Retrieve all signin public keys *)
    get sig_public_keys(=3, node_3_psk) in
    let (=witness_vector_to_bitstring(witness_node_1)) = checksign(witness_node_1_sign, node_1_psk) in (* Check node 1 witness vector signature *)
    let hi_1 = hash(node_id) in (* Circulant hash matrix *)
    let node_1_pk = retrieve_pubkey_verif(s_i_1, hash(1), witness_node_1) in (* Regenerate node 1 public key from key init vector, its id and its witness vector *)
    in(node_2_1, node_acceptance_sig:new_node_acceptance_signature); (* Retrieve acceptance signature generated by node 1 *)
    let (=hi_1) = check_acceptance_sig(node_acceptance_sig, witness_node_1) in (* Check that the acceptance signature is for node 2 *)
    new hi_2:non_singular_matrix; (* Generate secret matrices *)
    new hi_3:non_singular_matrix;
    let s_i = sig_to_key_init_vector(node_acceptance_sig) in (* Generate key init vector from acceptance signature *)
    let private_key = generate_private_key(hi_2, hi_3, hi_1, s_i) in (* Generate private key from secret matrices, hash of node id and key init vector *)
    let r_i = get_witness_vector(private_key) in (* Witness vector *)
    out(broadcast_channel, (pk(private_key), node_acceptance_sig, s_i, r_i, sign(witness_vector_to_bitstring(r_i), ssk))); (* Broadcast public key, acceptance signature generated by node 1, related key init vector, witness vector, and witness vector signature *)
    event public_key_broadcast(2, node_acceptance_sig);
    new gk_seed:bitstring; (* Generate seed to derivate the new group key *)
    out(node_2_1, aenc(gk_seed, node_1_pk)); (* Transmit encrypted seed to node 1 *)
    in(node_2_1, (g_k_enc:bitstring, g_k_enc_sign:bitstring)); (* Retrieve new encrypted group key from node 1 *)
    let (=g_k_enc) = checksign(g_k_enc_sign, node_1_psk) in (* Check authenticity of received group key *)
    let group_key_to_bitstring(g_k) = adec(g_k_enc, private_key) in (* Decrypt group key *)
    out(node_2_1, senc(g_k, secret_to_transmit)); (* Send secret encrypted using group key *)

    sync 2 [node2];

    event node_signature_generated_share2(2, 3, hi_2, hi_3);
    out(node_2_3, extract_shares2_part_2_new_node_acceptance_signature(generate_shares_2_new_node_sig(hash(3), hi_2, hi_3))); (* Accept node 3 to join, but now node 2 has only 50% of the voting threshold *)
    in(broadcast_channel, (node_3_pk:pkey, node3_acceptance_sig_node1:shares2_part_1_new_node_acceptance_signature, node3_acceptance_sig_node2:shares2_part_2_new_node_acceptance_signature, node_3_si:key_init_vector, node_3_ri:witness_vector, node_3_ri_sign:bitstring)); (* Retrieve broadcast node 3 public key, the acceptance signature node 1 and 2 generated, the associated key init vector and the witness vector. The witness vector needs to be signed, in order to emulate the fact that MitM attack cannot occur. *)
    let (=witness_vector_to_bitstring(node_3_ri)) = checksign(node_3_ri_sign, node_3_psk) in (* Check that witness vector has been correctly signed *)
    let (=hash(3)) = check_share2_acceptance_sig_part_1(node3_acceptance_sig_node1, witness_node_1) in (* Check that the given acceptance signature is the one that node 1 just generated *)
    let (=hash(3)) = check_share2_acceptance_sig_part_2(node3_acceptance_sig_node2, r_i) in (* Check that the given acceptance signature is the one that node 2 just generated *)
    let (=node_3_si) = shares2_sig_to_key_init_vector(node3_acceptance_sig_node1, node3_acceptance_sig_node2) in (* Check that the key init vector comes from the 2 node acceptance signatures *)
    let (=node_3_pk) = retrieve_pubkey_verif(node_3_si, hash(3), node_3_ri) in (* Check that the node 3 public key has been generated from the key init vector, hash of node 3 id and the witness vector *)
    in(node_2_3, seed_enc:bitstring); (* Receive group key seed from node 3 *)
    let new_gk_seed = adec(seed_enc, private_key) in (* Retrieve new group key seed from node 3 *)
    let g_k = kdf(g_k, new_gk_seed) in (* Derivate new group key from old key and seed *)
    let new_g_k_enc = aenc(group_key_to_bitstring(g_k), node_3_pk) in (* Encrypt new group key using node 3 public key *)
    out(node_2_3, (new_g_k_enc, sign(new_g_k_enc, ssk))); (* Send new group key to node 3 *)

    event test_reachability(2);
    0.

let node_3(node_id:nat, ssk:sskey, s_i_1:key_init_vector) =
    in(broadcast_channel, (witness_node_1:witness_vector, witness_node_1_sign:bitstring)); (* Retrieve node 1 witness vector, which is signed in order to emulate the fact that MitM isn't possible *)
    sync 1 [node3];
    get sig_public_keys(=1, node_1_psk) in (* Retrieve all signin public keys *)
    get sig_public_keys(=2, node_2_psk) in
    let (=witness_vector_to_bitstring(witness_node_1)) = checksign(witness_node_1_sign, node_1_psk) in (* Check node 1 witness vector signature *)
    let hi_1 = hash(node_id) in (* Circulant hash matrix *)
    let node_1_pk = retrieve_pubkey_verif(s_i_1, hash(1), witness_node_1) in (* Regenerate node 1 public key from key init vector, its id and its witness vector *)
    in(broadcast_channel, (node_2_pk:pkey, node2_acceptance_sig:new_node_acceptance_signature, node_2_si:key_init_vector, node_2_ri:witness_vector, node_2_ri_sign:bitstring)); (* Retrieve broadcast node 2 public key, the acceptance signature node 1 generated, the associated key init vector and the witness vector. The witness vector needs to be signed, in order to emulate the fact that MitM attack cannot occur. *)
    let (=witness_vector_to_bitstring(node_2_ri)) = checksign(node_2_ri_sign, node_2_psk) in (* Check that witness vector has been correctly signed *)
    let (=hash(2)) = check_acceptance_sig(node2_acceptance_sig, witness_node_1) in (* Check that the given acceptance signature is the one that node 1 just generated *)
    let (=node_2_si) = sig_to_key_init_vector(node2_acceptance_sig) in (* Check that the key init vector comes from node acceptance signature *)
    let (=node_2_pk) = retrieve_pubkey_verif(node_2_si, hash(2), node_2_ri) in (* Check that the node 2 public key has been generated from the key init vector, hash of node 2 id and the witness vector *)
    sync 2 [node3];
    in(node_1_3, node1_acceptance_sig:shares2_part_1_new_node_acceptance_signature); (* Receive acceptance signatures from nodes 1 and 2 *)
    in(node_2_3, node2_acceptance_sig:shares2_part_2_new_node_acceptance_signature);
    let (=hi_1) = check_share2_acceptance_sig_part_1(node1_acceptance_sig, witness_node_1) in (* Check that the first acceptance signature is for node 2 *)
    let (=hi_1) = check_share2_acceptance_sig_part_2(node2_acceptance_sig, node_2_ri) in (* Check that the second acceptance signature is for node 2 *)
    new hi_2:non_singular_matrix; (* Generate secret matrices *)
    new hi_3:non_singular_matrix;
    let s_i = shares2_sig_to_key_init_vector(node1_acceptance_sig, node2_acceptance_sig) in (* Generate key init vector from the two acceptance signatures *)
    let private_key = generate_private_key(hi_2, hi_3, hi_1, s_i) in (* Generate private key from secret matrices, hash of node id and key init vector *)
    let r_i = get_witness_vector(private_key) in (* Witness vector *)
    out(broadcast_channel, (pk(private_key), node1_acceptance_sig, node2_acceptance_sig, s_i, r_i, sign(witness_vector_to_bitstring(r_i), ssk))); (* Broadcast public key, acceptance signatures generated by node 1 and 2, related key init vector, witness vector, and witness vector signature *)
    event public_key_broadcast_share2(3, node1_acceptance_sig, node2_acceptance_sig);
    new gk_seed:bitstring; (* Generate seed to derivate the new group key *)
    out(node_1_3, aenc(gk_seed, node_1_pk)); (* Transmit encrypted seed to node 1 *)
    out(node_2_3, aenc(gk_seed, node_2_pk)); (* Transmit encrypted seed to node 2 *)
    in(node_1_3, (g_k_enc:bitstring, g_k_enc_sign:bitstring)); (* Retrieve new encrypted group key from node 1 *)
    let (=g_k_enc) = checksign(g_k_enc_sign, node_1_psk) in (* Check authenticity of received group key *)
    let group_key_to_bitstring(g_k_from_node_1) = adec(g_k_enc, private_key) in (* Decrypt group key *)
    in(node_2_3, (g_k_enc:bitstring, g_k_enc_sign:bitstring)); (* Retrieve new encrypted group key from node 1 *)
    let (=g_k_enc) = checksign(g_k_enc_sign, node_2_psk) in (* Check authenticity of received group key *)
    let group_key_to_bitstring(g_k) = adec(g_k_enc, private_key) in (* Decrypt group key *)
    let (=g_k_from_node_1) = g_k in (* Both received group keys should be the same, however it means that a node is trying to counterfeit the group key *)
    out(broadcast_channel_to_attacker, (g_k, gk_seed, private_key)); (* Oh oh, everything is leaked, so forward secrecy of secret must be ensured *)
    event test_reachability(3);
    0.

process
    event test_reachability(0);
    new node_1_ssk:sskey; (* signature are here in order to "emulate" id-based encryption, as we assume witness vector cannot be modified *)
    let node_1_psk = spk(node_1_ssk) in
    insert sig_public_keys(1, node_1_psk);
    new node_2_ssk:sskey;
    let node_2_psk = spk(node_2_ssk) in
    insert sig_public_keys(2, node_2_psk);
    new node_3_ssk:sskey;
    let node_3_psk = spk(node_3_ssk) in
    insert sig_public_keys(3, node_3_psk);
    new s_i_1:key_init_vector; (* Init vector of node 1 is random, as its the first node to join the network. Otherwise we can assume it's a fixed value in the protocol specs *)
    out(broadcast_channel_to_attacker, s_i_1); (* The init vector is broadcasted *)
    node_1(1, node_1_ssk, s_i_1) | node_2(2, node_2_ssk, s_i_1) | node_3(3, node_3_ssk, s_i_1)
